#!/bin/bash

. lib.sh

# Common commands
XPATH="xmlstarlet sel -t -v"
[[ $CURL ]] || CURL="curl -s"

# Check a response and then exit if it's bad
function check_response() {
	CODE=$($XPATH '/api/response/result/@code' <<< "$1")
	
	if [[ $CODE != 1000 ]]; then
		echo "Bad response ($CODE): $($XPATH '/api/response/details' <<< "$1")"
		exit $STATE_UNKNOWN
	fi
}

while getopts "k:r:w:c:" OPT; do
	case $OPT in
		k) AID=$OPTARG ;;
		r) REF=$OPTARG ;;
		w) WARN=$(human_to_bytes $OPTARG) ;;
		c) CRIT=$(human_to_bytes $OPTARG) ;;
	esac
done

if [[ -z $AID || -z $REF || -z $WARN || -z $CRIT ]]; then
	echo "Usage: $0 -k <api key> -r <server ref> -w <warning> -c <critical>"
	exit $STATE_UNKNOWN
fi

API="https://secure.leaseweb.nl/api"
XP_SID="/api/response/details/detail/server[reference='$REF']/server_pack_id"
XP_TRAF="/api/response/details/detail/datatraffic/measurement/total"

# Fetch server id
SERVERS=$($CURL "$API/listserverpacks?aid=$AID")
check_response "$SERVERS"
SID=$($XPATH $XP_SID <<< $SERVERS)

if [[ -z $SID ]]; then
	echo "Server reference '$REF' not found"
	exit $STATE_UNKOWN
fi

# Fetch the traffic from this month and the traffic from the last 7 days. We
# assume that the human formatted numbers are SI.
MONTH=$($CURL "$API/network/get?aid=$AID&server_pack_id=$SID&\
date_from=01-$(date +%m-%Y)&\
date_to=$(date -d '1 day ago' +%d-%m-%Y)")
check_response "$MONTH"
TRAF_MONTH=$(human_to_bytes $($XPATH $XP_TRAF <<< $MONTH))

DAYS7=$($CURL "$API/network/get?aid=$AID&server_pack_id=$SID&\
date_from=$(date -d '8 days ago' +%d-%m-%Y)&\
date_to=$(date -d '1 day ago' +%d-%m-%Y)")
check_response "$DAYS7"
TRAF_DAYS7=$(human_to_bytes $($XPATH $XP_TRAF <<< $DAYS7))

# Compute the daily traffic rate and the projected end of month traffic sum
eval $(bc -l <<< "
	current = $TRAF_MONTH
	daily = $TRAF_DAYS7 / 7
	last_day = $(date -d "$(date +%Y-%m-01) + 1 month - 1 day" +%d)
	current_day = $(date -d '1 day ago' +%d)
	days_to_go = last_day - current_day
	projected = current + daily * days_to_go
	scale = 0
	print \"TRAF_DAILY=\", daily / 1, \"; TRAF_PROJECTED=\", projected / 1")

INFO="Projected traffic is $(bytes_to_human $TRAF_PROJECTED) (currently \
$(bytes_to_human $TRAF_MONTH) with daily rate of $(bytes_to_human $TRAF_DAILY))"

if [ $TRAF_PROJECTED -gt $CRIT ]; then
	STATE=CRITICAL;
elif [ $TRAF_PROJECTED -gt $WARN ]; then
	STATE=WARNING;
else
	STATE=OK;
fi

echo "$STATE - $INFO"

eval exit \$STATE_$STATE
