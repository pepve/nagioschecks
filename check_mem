#!/bin/bash

# Nagios plugin exit codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

while getopts "c:w:" OPT; do
	case $OPT in
		w) WARNING_PC=$OPTARG ;;
		c) CRITICAL_PC=$OPTARG ;;
	esac
done

if [ -z "$WARNING_PC" -o -z "$CRITICAL_PC" ]; then
	echo "Usage: $0 -w <warning percentage> -c <critical percentage>"
	exit $STATE_UNKNOWN
fi

# The values from /proc/meminfo are in KiB (even though the output prints kB),
# convert them to B to prevent ambiguity later on, and insert them as variables.
eval "`sed -r 'y/()/_ /;
		s/ *: *([0-9]*).*/=$((\1 * 1024))/;
		s/([a-z])([A-Z])/\1_\2/g;
		s/.*/MEM_\U\0/' /proc/meminfo`"

# Memory usage inclusive buffers and cache
MEM_USED_INC=$((MEM_MEM_TOTAL - MEM_MEM_FREE))

# Memory usage exclusive buffers and cache ('real' usage)
MEM_USED_EXC=$((MEM_USED_INC - MEM_BUFFERS - MEM_CACHED))
MEM_USED_EXC_PC=$((MEM_USED_EXC * 100 / MEM_MEM_TOTAL))

MIB=$((1024 * 1024))

INFO="$MEM_USED_EXC_PC% used - $((MEM_USED_EXC / MIB)) MiB ($((MEM_USED_INC / \
MIB)) MiB with buffers/cache) of $((MEM_MEM_TOTAL / MIB)) MiB total"
PERF_EXC="memUsedExc=${MEM_USED_EXC}B;$((MEM_MEM_TOTAL * WARNING_PC / 100));\
$((MEM_MEM_TOTAL * CRITICAL_PC / 100));0;$MEM_MEM_TOTAL"
PERF_INC="memUsedInc=${MEM_USED_INC}B;;;0;$MEM_MEM_TOTAL"

if [ $MEM_USED_EXC_PC -gt $CRITICAL_PC ]; then
	STATE="CRITICAL";
elif [ $MEM_USED_EXC_PC -gt $WARNING_PC ]; then
	STATE="WARNING";
else
	STATE="OK";
fi

echo "$STATE - $INFO|$PERF_EXC $PERF_INC"

eval exit \$STATE_$STATE
